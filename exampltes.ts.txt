import * as RD from './src/index'
// Examples --------------------------------------------------------------------

interface User {
  name: string
}

const jane = {name: 'Jane Doe'}
const mark = {name: 'Mark Twain'}

const fetchedUser = RD.success<User>(jane)

const showMessage = RD.fold<Error, User, string>({
  notAsked: () => 'notAsked',
  loading: () => 'loading',
  success: ({name}) => 'success: ' + name,
  failure: ({message}) => 'failure: ' + message,
})

showMessage(fetchedUser)

const getName = ({name}: User) => name
const getErrorMessage = ({message}: Error) => message

getName(jane) // string

getErrorMessage(new Error('Something went wrong'))

RD.Functor.map(fetchedUser, getName) // RemoteData<Error, string>

RD.Bifunctor.mapLeft(fetchedUser, getErrorMessage) // RemoteData<string, User>

RD.Bifunctor.bimap(fetchedUser, getErrorMessage, getName) // RemoteData<string, string>

const kill = (a: User) => (b: User) => `${a.name} kills ${b.name}`

kill(jane)(mark) // 'Jane kills Mark'

// kill(success(jane))(success(mark));

RD.Apply.ap(
  RD.Apply.ap(RD.Applicative.of(kill), RD.Applicative.of(jane)),
  RD.Applicative.of(mark),
) // RemoteData<Error, string>

// { tag: 'Success', data: 'Jane kills Mark' }

const exclaim = ({name}: User): RD.RemoteData<Error, User> =>
  RD.success({name: name + '!'})

RD.Chain.chain(fetchedUser, exclaim) // RemoteData<Error, User>

const monoidFirstNumber = RD.getMonoidFirst<Error, User>()

monoidFirstNumber.concat(RD.success(jane), RD.loading) // --------- success(jane)
monoidFirstNumber.concat(RD.loading, RD.success(mark)) // --------- success(mark)
monoidFirstNumber.concat(RD.success(jane), RD.success(mark)) // --- success(jane)

const monoidSecondNumber = RD.getMonoidSecond<Error, User>()

monoidSecondNumber.concat(RD.success(jane), RD.loading) // --------- success(jane)
monoidSecondNumber.concat(RD.loading, RD.success(mark)) // --------- success(mark)
monoidSecondNumber.concat(RD.success(jane), RD.success(mark)) // --- success(mark)
